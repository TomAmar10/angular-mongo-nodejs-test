{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/operations.service\";\nimport * as i2 from \"src/app/services/accounts.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nfunction OperationFormComponent_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵtext(1, \"please fill all details\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction OperationFormComponent_option_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", item_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r3, \" \");\n  }\n}\nfunction OperationFormComponent_option_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", item_r4._id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r4.number, \" \");\n  }\n}\nexport class OperationFormComponent {\n  constructor(taskService, accountsService, fb, route) {\n    this.taskService = taskService;\n    this.accountsService = accountsService;\n    this.fb = fb;\n    this.route = route;\n    this.myForm = this.fb.group({\n      type: [null, [Validators.required]],\n      created: [null, [Validators.required]],\n      account: [null, [Validators.required]],\n      interest: [null],\n      payments: [null]\n    });\n    this.isValid = true;\n    this.errorMsg = \"\";\n    this.paramsId = \"\";\n    this.types = [\"deposit\", \"withdraw\", \"loan\"];\n  }\n  ngOnInit() {\n    this.accountsService.getAll();\n    this.accounts$ = this.accountsService.accounts$;\n    this.route.params.subscribe(res => this.paramsId = res[\"id\"]);\n    if (this.paramsId) {\n      this.taskService.getById(this.paramsId).subscribe(res => {\n        this.myForm = this.fb.group({\n          type: [res.type, [Validators.required]],\n          created: [this.toValidDate(res.created), [Validators.required]],\n          account: [res.account._id, [Validators.required]],\n          interest: [res.interest],\n          payments: [res.payments]\n        });\n      });\n    }\n  }\n  onSubmit() {\n    if (this.myForm.invalid) {\n      this.isValid = false;\n      return;\n    }\n    this.newOperation = {\n      ...this.myForm.value\n    };\n    if (this.paramsId) {\n      this.taskService.update(this.paramsId, this.newOperation);\n      return;\n    }\n    this.taskService.create(this.newOperation);\n  }\n  validate() {\n    this.isValid = true;\n  }\n  toValidDate(date) {\n    return new Date(date).toISOString().split(\".\")[0];\n  }\n}\nOperationFormComponent.ɵfac = function OperationFormComponent_Factory(t) {\n  return new (t || OperationFormComponent)(i0.ɵɵdirectiveInject(i1.OperationsService), i0.ɵɵdirectiveInject(i2.AccountsService), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.ActivatedRoute));\n};\nOperationFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: OperationFormComponent,\n  selectors: [[\"app-operation-form\"]],\n  decls: 39,\n  vars: 10,\n  consts: [[1, \"form-container\"], [3, \"formGroup\", \"ngSubmit\"], [\"class\", \"error-msg\", 4, \"ngIf\"], [\"formControlName\", \"type\", 3, \"change\"], [\"disabled\", \"\", 3, \"ngValue\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"number\", \"formControlName\", \"created\", 3, \"change\"], [\"formControlName\", \"account\", 3, \"change\"], [\"type\", \"datetime-local\", \"formControlName\", \"created\", 3, \"change\"], [\"type\", \"number\", \"formControlName\", \"interest\"], [\"type\", \"number\", \"formControlName\", \"payments\"], [1, \"submit-btn\"], [1, \"error-msg\"], [3, \"ngValue\"]],\n  template: function OperationFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function OperationFormComponent_Template_form_ngSubmit_1_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(2, \"h1\");\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(4, OperationFormComponent_span_4_Template, 2, 0, \"span\", 2);\n      i0.ɵɵelementStart(5, \"div\")(6, \"label\");\n      i0.ɵɵtext(7, \"Type:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"select\", 3);\n      i0.ɵɵlistener(\"change\", function OperationFormComponent_Template_select_change_8_listener() {\n        return ctx.validate();\n      });\n      i0.ɵɵelementStart(9, \"option\", 4);\n      i0.ɵɵtext(10, \"choose type\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(11, OperationFormComponent_option_11_Template, 2, 2, \"option\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"div\")(13, \"label\");\n      i0.ɵɵtext(14, \"Amount:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"input\", 6);\n      i0.ɵɵlistener(\"change\", function OperationFormComponent_Template_input_change_15_listener() {\n        return ctx.validate();\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"div\")(17, \"label\");\n      i0.ɵɵtext(18, \"account name:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"select\", 7);\n      i0.ɵɵlistener(\"change\", function OperationFormComponent_Template_select_change_19_listener() {\n        return ctx.validate();\n      });\n      i0.ɵɵelementStart(20, \"option\", 4);\n      i0.ɵɵtext(21, \"choose account\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(22, OperationFormComponent_option_22_Template, 2, 2, \"option\", 5);\n      i0.ɵɵpipe(23, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(24, \"div\")(25, \"label\");\n      i0.ɵɵtext(26, \"Created:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"input\", 8);\n      i0.ɵɵlistener(\"change\", function OperationFormComponent_Template_input_change_27_listener() {\n        return ctx.validate();\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(28, \"div\")(29, \"label\");\n      i0.ɵɵtext(30, \"Interest:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(31, \"input\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(32, \"div\")(33, \"label\");\n      i0.ɵɵtext(34, \"Payments:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(35, \"input\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(36, \"div\", 11)(37, \"button\");\n      i0.ɵɵtext(38);\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.myForm);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.paramsId ? \"Edit Operation\" : \"Add New Operation\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isValid);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngValue\", null);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.types);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngValue\", null);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(23, 8, ctx.accounts$));\n      i0.ɵɵadvance(16);\n      i0.ɵɵtextInterpolate(ctx.paramsId ? \"Save\" : \"Add\");\n    }\n  },\n  dependencies: [i5.NgForOf, i5.NgIf, i3.ɵNgNoValidate, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i5.AsyncPipe],\n  styles: [\".form-container[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n  flex-direction: column;\\r\\n  align-items: center;\\r\\n  margin-top: 2rem;\\r\\n}\\r\\n\\r\\nh1[_ngcontent-%COMP%] {\\r\\n  margin-top: 0;\\r\\n  margin-bottom: 1rem;\\r\\n}\\r\\n\\r\\nform[_ngcontent-%COMP%] {\\r\\n  border: 1px black solid;\\r\\n  padding: 1rem;\\r\\n  border-radius: 10px;\\r\\n}\\r\\n\\r\\nform[_ngcontent-%COMP%]   div[_ngcontent-%COMP%] {\\r\\n  width: 24rem;\\r\\n  display: flex;\\r\\n  justify-content: space-between;\\r\\n  font-size: 1.2rem;\\r\\n  margin-bottom:1rem;\\r\\n  margin-top: 0.5rem;\\r\\n}\\r\\n\\r\\ninput[type=text][_ngcontent-%COMP%], input[type=datetime-local][_ngcontent-%COMP%] {\\r\\n  border-radius: 5px;\\r\\n  font-size: 1rem;\\r\\n  padding: 0.2rem 0.5rem;\\r\\n  width: 12.5rem;\\r\\n  border: none;\\r\\n  outline: 3px rgb(106, 104, 104) solid;\\r\\n}\\r\\nform[_ngcontent-%COMP%]   select[_ngcontent-%COMP%] {\\r\\n  border-radius: 5px;\\r\\n  width: 13.5rem;\\r\\n  padding: 0.2rem 0.5rem;\\r\\n  font-size: 1rem;\\r\\n  padding: 0.2rem 1rem;\\r\\n  border: none;\\r\\n  outline: 3px rgb(106, 104, 104) solid;\\r\\n}\\r\\nform[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]{\\r\\n  width: 1rem;\\r\\n  margin-right: 1rem;\\r\\n  margin-left: -2rem;\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\nform[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:last-child {\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n}\\r\\nbutton[_ngcontent-%COMP%]{\\r\\n  background-color: rgb(6, 90, 6);\\r\\n  border: 1px white solid;\\r\\n  font-size: 1rem;\\r\\n  margin-top: 0.5rem;\\r\\n  font-weight: bold;\\r\\n  color: white;\\r\\n  border-radius: 5px;\\r\\n  padding: 0.3rem 1rem;\\r\\n  cursor: pointer;\\r\\n}\\r\\nbutton[_ngcontent-%COMP%]:hover{\\r\\n  background-color: rgb(13, 123, 13);\\r\\n  padding: 0.3rem 1.1rem;\\r\\n}\\r\\n\\r\\n.error-msg[_ngcontent-%COMP%]{\\r\\n  color: red;\\r\\n  font-size: 1.1rem;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9vcGVyYXRpb24tZm9ybS9vcGVyYXRpb24tZm9ybS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixzQkFBc0I7RUFDdEIsbUJBQW1CO0VBQ25CLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSx1QkFBdUI7RUFDdkIsYUFBYTtFQUNiLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLFlBQVk7RUFDWixhQUFhO0VBQ2IsOEJBQThCO0VBQzlCLGlCQUFpQjtFQUNqQixrQkFBa0I7RUFDbEIsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLGVBQWU7RUFDZixzQkFBc0I7RUFDdEIsY0FBYztFQUNkLFlBQVk7RUFDWixxQ0FBcUM7QUFDdkM7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQixjQUFjO0VBQ2Qsc0JBQXNCO0VBQ3RCLGVBQWU7RUFDZixvQkFBb0I7RUFDcEIsWUFBWTtFQUNaLHFDQUFxQztBQUN2QztBQUNBO0VBQ0UsV0FBVztFQUNYLGtCQUFrQjtFQUNsQixrQkFBa0I7RUFDbEIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGFBQWE7RUFDYix1QkFBdUI7QUFDekI7QUFDQTtFQUNFLCtCQUErQjtFQUMvQix1QkFBdUI7RUFDdkIsZUFBZTtFQUNmLGtCQUFrQjtFQUNsQixpQkFBaUI7RUFDakIsWUFBWTtFQUNaLGtCQUFrQjtFQUNsQixvQkFBb0I7RUFDcEIsZUFBZTtBQUNqQjtBQUNBO0VBQ0Usa0NBQWtDO0VBQ2xDLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLFVBQVU7RUFDVixpQkFBaUI7QUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyIuZm9ybS1jb250YWluZXIge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIG1hcmdpbi10b3A6IDJyZW07XHJcbn1cclxuXHJcbmgxIHtcclxuICBtYXJnaW4tdG9wOiAwO1xyXG4gIG1hcmdpbi1ib3R0b206IDFyZW07XHJcbn1cclxuXHJcbmZvcm0ge1xyXG4gIGJvcmRlcjogMXB4IGJsYWNrIHNvbGlkO1xyXG4gIHBhZGRpbmc6IDFyZW07XHJcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcclxufVxyXG5cclxuZm9ybSBkaXYge1xyXG4gIHdpZHRoOiAyNHJlbTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICBmb250LXNpemU6IDEuMnJlbTtcclxuICBtYXJnaW4tYm90dG9tOjFyZW07XHJcbiAgbWFyZ2luLXRvcDogMC41cmVtO1xyXG59XHJcblxyXG5pbnB1dFt0eXBlPXRleHRdLCBpbnB1dFt0eXBlPWRhdGV0aW1lLWxvY2FsXSB7XHJcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gIGZvbnQtc2l6ZTogMXJlbTtcclxuICBwYWRkaW5nOiAwLjJyZW0gMC41cmVtO1xyXG4gIHdpZHRoOiAxMi41cmVtO1xyXG4gIGJvcmRlcjogbm9uZTtcclxuICBvdXRsaW5lOiAzcHggcmdiKDEwNiwgMTA0LCAxMDQpIHNvbGlkO1xyXG59XHJcbmZvcm0gc2VsZWN0IHtcclxuICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgd2lkdGg6IDEzLjVyZW07XHJcbiAgcGFkZGluZzogMC4ycmVtIDAuNXJlbTtcclxuICBmb250LXNpemU6IDFyZW07XHJcbiAgcGFkZGluZzogMC4ycmVtIDFyZW07XHJcbiAgYm9yZGVyOiBub25lO1xyXG4gIG91dGxpbmU6IDNweCByZ2IoMTA2LCAxMDQsIDEwNCkgc29saWQ7XHJcbn1cclxuZm9ybSBpbnB1dFt0eXBlPWNoZWNrYm94XXtcclxuICB3aWR0aDogMXJlbTtcclxuICBtYXJnaW4tcmlnaHQ6IDFyZW07XHJcbiAgbWFyZ2luLWxlZnQ6IC0ycmVtO1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxufVxyXG5cclxuZm9ybSBkaXY6bGFzdC1jaGlsZCB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxufVxyXG5idXR0b257XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDYsIDkwLCA2KTtcclxuICBib3JkZXI6IDFweCB3aGl0ZSBzb2xpZDtcclxuICBmb250LXNpemU6IDFyZW07XHJcbiAgbWFyZ2luLXRvcDogMC41cmVtO1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIGNvbG9yOiB3aGl0ZTtcclxuICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgcGFkZGluZzogMC4zcmVtIDFyZW07XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG59XHJcbmJ1dHRvbjpob3ZlcntcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTMsIDEyMywgMTMpO1xyXG4gIHBhZGRpbmc6IDAuM3JlbSAxLjFyZW07XHJcbn1cclxuXHJcbi5lcnJvci1tc2d7XHJcbiAgY29sb3I6IHJlZDtcclxuICBmb250LXNpemU6IDEuMXJlbTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","OperationFormComponent","constructor","taskService","accountsService","fb","route","group","type","required","created","account","interest","payments","ngOnInit","getAll","accounts$","params","subscribe","res","paramsId","getById","myForm","toValidDate","_id","onSubmit","invalid","isValid","newOperation","value","update","create","validate","date","Date","toISOString","split","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\user\\OneDrive\\Desktop\\John Brice\\mongoDB\\TomAmar_test4\\frontend\\src\\app\\components\\operation-form\\operation-form.component.ts","C:\\Users\\user\\OneDrive\\Desktop\\John Brice\\mongoDB\\TomAmar_test4\\frontend\\src\\app\\components\\operation-form\\operation-form.component.html"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Observable } from \"rxjs\";\nimport CustomerModel from \"src/app/models/account-model\";\nimport OperationModel from \"src/app/models/operation-model\";\nimport { AccountsService } from \"src/app/services/accounts.service\";\nimport { OperationsService } from \"src/app/services/operations.service\";\n\n@Component({\n  selector: \"app-operation-form\",\n  templateUrl: \"./operation-form.component.html\",\n  styleUrls: [\"./operation-form.component.css\"],\n})\nexport class OperationFormComponent implements OnInit {\n  accounts$: Observable<CustomerModel[]>;\n\n  myForm: FormGroup = this.fb.group({\n    type: [null, [Validators.required]],\n    created: [null, [Validators.required]],\n    account: [null, [Validators.required]],\n    interest: [null],\n    payments: [null],\n  });\n  newOperation: OperationModel;\n  isValid = true;\n  errorMsg = \"\";\n  paramsId = \"\";\n\n  types: string[] = [\"deposit\", \"withdraw\", \"loan\"];\n\n  constructor(\n    private taskService: OperationsService,\n    private accountsService: AccountsService,\n    private fb: FormBuilder,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit(): void {\n    this.accountsService.getAll();\n    this.accounts$ = this.accountsService.accounts$;\n\n    this.route.params.subscribe((res) => (this.paramsId = res[\"id\"]));\n    if (this.paramsId) {\n      this.taskService\n        .getById(this.paramsId)\n        .subscribe((res: OperationModel) => {\n          this.myForm = this.fb.group({\n            type: [res.type, [Validators.required]],\n            created: [this.toValidDate(res.created), [Validators.required]],\n            account: [res.account._id, [Validators.required]],\n            interest: [res.interest],\n            payments: [res.payments],\n          });\n        });\n    }\n  }\n\n  onSubmit() {\n    if (this.myForm.invalid) {\n      this.isValid = false;\n      return;\n    }\n    this.newOperation = { ...this.myForm.value };\n    if (this.paramsId) {\n      this.taskService.update(this.paramsId, this.newOperation);\n      return;\n    }\n    this.taskService.create(this.newOperation);\n  }\n\n  validate() {\n    this.isValid = true;\n  }\n\n  toValidDate(date: string) {\n    return new Date(date).toISOString().split(\".\")[0];\n  }\n}\n","<div class=\"form-container\">\n  <form [formGroup]=\"myForm\" (ngSubmit)=\"onSubmit()\">\n    <h1>{{ paramsId ? \"Edit Operation\" : \"Add New Operation\" }}</h1>\n    <span class=\"error-msg\" *ngIf=\"!isValid\">please fill all details</span>\n    <div>\n      <label>Type:</label>\n      <select formControlName=\"type\" (change)=\"validate()\">\n        <option [ngValue]=\"null\" disabled>choose type</option>\n        <option *ngFor=\"let item of types\" [ngValue]=\"item\">\n          {{ item }}\n        </option>\n      </select>\n    </div>\n    <div>\n      <label>Amount:</label>\n      <input\n        type=\"number\"\n        formControlName=\"created\"\n        (change)=\"validate()\"\n      />\n    </div>\n    <div>\n      <label>account name:</label>\n      <select formControlName=\"account\" (change)=\"validate()\">\n        <option [ngValue]=\"null\" disabled>choose account</option>\n        <option *ngFor=\"let item of accounts$ | async\" [ngValue]=\"item._id\">\n          {{ item.number }}\n        </option>\n      </select>\n    </div>\n    <div>\n      <label>Created:</label>\n      <input\n        type=\"datetime-local\"\n        formControlName=\"created\"\n        (change)=\"validate()\"\n      />\n    </div>\n    <div>\n      <label>Interest:</label>\n      <input type=\"number\" formControlName=\"interest\" />\n    </div>\n    <div>\n      <label>Payments:</label>\n      <input type=\"number\" formControlName=\"payments\" />\n    </div>\n    <div class=\"submit-btn\">\n      <button>{{ paramsId ? \"Save\" : \"Add\" }}</button>\n    </div>\n  </form>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
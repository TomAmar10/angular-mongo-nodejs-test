{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nvar OpType;\n(function (OpType) {\n  OpType[\"WITHDRAW\"] = \"withdraw\";\n})(OpType || (OpType = {}));\nexport class OperationFormComponent {\n  constructor(taskService, accountsService, fb, route) {\n    this.taskService = taskService;\n    this.accountsService = accountsService;\n    this.fb = fb;\n    this.route = route;\n    this.myForm = this.fb.group({\n      type: [null, [Validators.required]],\n      created: [null, [Validators.required]],\n      account: [null, [Validators.required]],\n      interest: [null],\n      payments: [null]\n    });\n    this.isValid = true;\n    this.errorMsg = \"\";\n    this.paramsId = \"\";\n    this.types = [\"deposit\", \"withdraw\", \"loan\"];\n  }\n  ngOnInit() {\n    this.accountsService.getAll();\n    this.accounts$ = this.accountsService.accounts$;\n    this.route.params.subscribe(res => this.paramsId = res[\"id\"]);\n    if (this.paramsId) {\n      this.taskService.getById(this.paramsId).subscribe(res => {\n        this.myForm = this.fb.group({\n          type: [res.type, [Validators.required]],\n          created: [this.toValidDate(res.created), [Validators.required]],\n          account: [res.account._id, [Validators.required]],\n          interest: [res.interest],\n          payments: [res.payments]\n        });\n      });\n    }\n  }\n  onSubmit() {\n    if (this.myForm.invalid) {\n      this.isValid = false;\n      return;\n    }\n    this.newOperation = {\n      ...this.myForm.value\n    };\n    if (this.paramsId) {\n      this.taskService.update(this.paramsId, this.newOperation);\n      return;\n    }\n    this.taskService.create(this.newOperation);\n  }\n  validate() {\n    this.isValid = true;\n  }\n  toValidDate(date) {\n    return new Date(date).toISOString().split(\".\")[0];\n  }\n}","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;AAQnE,IAMKC,MAGJ;AATD,WAMKA,MAAM;EACTA,+BAAqB;AAEvB,CAAC,EAHIA,MAAM,KAANA,MAAM;AAKX,OAAM,MAAOC,sBAAsB;EAiBjCC,YACUC,WAA8B,EAC9BC,eAAgC,EAChCC,EAAe,EACfC,KAAqB;IAHrB,gBAAW,GAAXH,WAAW;IACX,oBAAe,GAAfC,eAAe;IACf,OAAE,GAAFC,EAAE;IACF,UAAK,GAALC,KAAK;IAlBf,WAAM,GAAc,IAAI,CAACD,EAAE,CAACE,KAAK,CAAC;MAChCC,IAAI,EAAE,CAAC,IAAI,EAAE,CAACT,UAAU,CAACU,QAAQ,CAAC,CAAC;MACnCC,OAAO,EAAE,CAAC,IAAI,EAAE,CAACX,UAAU,CAACU,QAAQ,CAAC,CAAC;MACtCE,OAAO,EAAE,CAAC,IAAI,EAAE,CAACZ,UAAU,CAACU,QAAQ,CAAC,CAAC;MACtCG,QAAQ,EAAE,CAAC,IAAI,CAAC;MAChBC,QAAQ,EAAE,CAAC,IAAI;KAChB,CAAC;IAEF,YAAO,GAAG,IAAI;IACd,aAAQ,GAAG,EAAE;IACb,aAAQ,GAAG,EAAE;IAEb,UAAK,GAAa,CAAC,SAAS,EAAE,UAAU,EAAE,MAAM,CAAC;EAO9C;EAEHC,QAAQ;IACN,IAAI,CAACV,eAAe,CAACW,MAAM,EAAE;IAC7B,IAAI,CAACC,SAAS,GAAG,IAAI,CAACZ,eAAe,CAACY,SAAS;IAE/C,IAAI,CAACV,KAAK,CAACW,MAAM,CAACC,SAAS,CAAEC,GAAG,IAAM,IAAI,CAACC,QAAQ,GAAGD,GAAG,CAAC,IAAI,CAAE,CAAC;IACjE,IAAI,IAAI,CAACC,QAAQ,EAAE;MACjB,IAAI,CAACjB,WAAW,CACbkB,OAAO,CAAC,IAAI,CAACD,QAAQ,CAAC,CACtBF,SAAS,CAAEC,GAAmB,IAAI;QACjC,IAAI,CAACG,MAAM,GAAG,IAAI,CAACjB,EAAE,CAACE,KAAK,CAAC;UAC1BC,IAAI,EAAE,CAACW,GAAG,CAACX,IAAI,EAAE,CAACT,UAAU,CAACU,QAAQ,CAAC,CAAC;UACvCC,OAAO,EAAE,CAAC,IAAI,CAACa,WAAW,CAACJ,GAAG,CAACT,OAAO,CAAC,EAAE,CAACX,UAAU,CAACU,QAAQ,CAAC,CAAC;UAC/DE,OAAO,EAAE,CAACQ,GAAG,CAACR,OAAO,CAACa,GAAG,EAAE,CAACzB,UAAU,CAACU,QAAQ,CAAC,CAAC;UACjDG,QAAQ,EAAE,CAACO,GAAG,CAACP,QAAQ,CAAC;UACxBC,QAAQ,EAAE,CAACM,GAAG,CAACN,QAAQ;SACxB,CAAC;MACJ,CAAC,CAAC;;EAER;EAEAY,QAAQ;IACN,IAAI,IAAI,CAACH,MAAM,CAACI,OAAO,EAAE;MACvB,IAAI,CAACC,OAAO,GAAG,KAAK;MACpB;;IAEF,IAAI,CAACC,YAAY,GAAG;MAAE,GAAG,IAAI,CAACN,MAAM,CAACO;IAAK,CAAE;IAC5C,IAAI,IAAI,CAACT,QAAQ,EAAE;MACjB,IAAI,CAACjB,WAAW,CAAC2B,MAAM,CAAC,IAAI,CAACV,QAAQ,EAAE,IAAI,CAACQ,YAAY,CAAC;MACzD;;IAEF,IAAI,CAACzB,WAAW,CAAC4B,MAAM,CAAC,IAAI,CAACH,YAAY,CAAC;EAC5C;EAEAI,QAAQ;IACN,IAAI,CAACL,OAAO,GAAG,IAAI;EACrB;EAEAJ,WAAW,CAACU,IAAY;IACtB,OAAO,IAAIC,IAAI,CAACD,IAAI,CAAC,CAACE,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACnD","names":["Validators","OpType","OperationFormComponent","constructor","taskService","accountsService","fb","route","group","type","required","created","account","interest","payments","ngOnInit","getAll","accounts$","params","subscribe","res","paramsId","getById","myForm","toValidDate","_id","onSubmit","invalid","isValid","newOperation","value","update","create","validate","date","Date","toISOString","split"],"sourceRoot":"","sources":["C:\\Users\\user\\OneDrive\\Desktop\\John Brice\\mongoDB\\TomAmar_test4\\frontend\\src\\app\\components\\operation-form\\operation-form.component.ts"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Observable } from \"rxjs\";\nimport CustomerModel from \"src/app/models/account-model\";\nimport OperationModel from \"src/app/models/operation-model\";\nimport { AccountsService } from \"src/app/services/accounts.service\";\nimport { OperationsService } from \"src/app/services/operations.service\";\n\n@Component({\n  selector: \"app-operation-form\",\n  templateUrl: \"./operation-form.component.html\",\n  styleUrls: [\"./operation-form.component.css\"],\n})\n\nenum OpType{\n  WITHDRAW = \"withdraw\",\n  \n}\n\nexport class OperationFormComponent implements OnInit {\n  accounts$: Observable<CustomerModel[]>;\n\n  myForm: FormGroup = this.fb.group({\n    type: [null, [Validators.required]],\n    created: [null, [Validators.required]],\n    account: [null, [Validators.required]],\n    interest: [null],\n    payments: [null],\n  });\n  newOperation: OperationModel;\n  isValid = true;\n  errorMsg = \"\";\n  paramsId = \"\";\n\n  types: string[] = [\"deposit\", \"withdraw\", \"loan\"];\n\n  constructor(\n    private taskService: OperationsService,\n    private accountsService: AccountsService,\n    private fb: FormBuilder,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit(): void {\n    this.accountsService.getAll();\n    this.accounts$ = this.accountsService.accounts$;\n\n    this.route.params.subscribe((res) => (this.paramsId = res[\"id\"]));\n    if (this.paramsId) {\n      this.taskService\n        .getById(this.paramsId)\n        .subscribe((res: OperationModel) => {\n          this.myForm = this.fb.group({\n            type: [res.type, [Validators.required]],\n            created: [this.toValidDate(res.created), [Validators.required]],\n            account: [res.account._id, [Validators.required]],\n            interest: [res.interest],\n            payments: [res.payments],\n          });\n        });\n    }\n  }\n\n  onSubmit() {\n    if (this.myForm.invalid) {\n      this.isValid = false;\n      return;\n    }\n    this.newOperation = { ...this.myForm.value };\n    if (this.paramsId) {\n      this.taskService.update(this.paramsId, this.newOperation);\n      return;\n    }\n    this.taskService.create(this.newOperation);\n  }\n\n  validate() {\n    this.isValid = true;\n  }\n\n  toValidDate(date: string) {\n    return new Date(date).toISOString().split(\".\")[0];\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet TaskFormComponent = class TaskFormComponent {\n  constructor(taskService, customerService, fb, route) {\n    this.taskService = taskService;\n    this.customerService = customerService;\n    this.fb = fb;\n    this.route = route;\n    this.myForm = this.fb.group({\n      description: [null, [Validators.required]],\n      customer: [null, [Validators.required]],\n      created: [null, [Validators.required]],\n      is_done: [false]\n    });\n    this.isValid = true;\n    this.errorMsg = '';\n    this.paramsId = '';\n    this.customers = [];\n  }\n  ngOnInit() {\n    this.route.params.subscribe(res => this.paramsId = res['id']);\n    if (this.paramsId) {\n      this.taskService.getById(this.paramsId).subscribe(res => {\n        this.myForm = this.fb.group({\n          description: [res.description, [Validators.required]],\n          customer: [res.customer, [Validators.required]],\n          created: [this.toValidDate(res.created), [Validators.required]],\n          is_done: [res.is_done]\n        });\n      });\n    }\n    this.customers = this.customerService.getAll();\n  }\n  onSubmit() {\n    if (this.myForm.invalid) {\n      this.isValid = false;\n      return;\n    }\n    this.myForm.value.created = this.toValidDate(this.myForm.value.created);\n    this.newTask = {\n      ...this.myForm.value\n    };\n    if (this.paramsId) {\n      this.taskService.update(this.paramsId, this.newTask);\n      return;\n    }\n    this.taskService.create(this.newTask);\n  }\n  validate() {\n    this.isValid = true;\n  }\n  toValidDate(date) {\n    return new Date(date).toISOString().split('.')[0];\n  }\n};\nTaskFormComponent = __decorate([Component({\n  selector: 'app-task-form',\n  templateUrl: './task-form.component.html',\n  styleUrls: ['./task-form.component.css']\n})], TaskFormComponent);\nexport { TaskFormComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","TaskFormComponent","constructor","taskService","customerService","fb","route","group","description","required","customer","created","is_done","ngOnInit","params","subscribe","res","paramsId","getById","myForm","toValidDate","customers","getAll","onSubmit","invalid","isValid","value","newTask","update","create","validate","date","Date","toISOString","split","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\user\\OneDrive\\Desktop\\John Brice\\mongoDB\\mongo-server-1\\frontend\\src\\app\\components\\task-form\\task-form.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport CustomerModel from 'src/app/models/customer-model';\nimport TaskModel from 'src/app/models/task-model';\nimport { CustomersService } from 'src/app/services/customers.service';\nimport { TasksService } from 'src/app/services/tasks.service';\n\n@Component({\n  selector: 'app-task-form',\n  templateUrl: './task-form.component.html',\n  styleUrls: ['./task-form.component.css'],\n})\nexport class TaskFormComponent implements OnInit {\n  myForm: FormGroup = this.fb.group({\n    description: [null, [Validators.required]],\n    customer: [null, [Validators.required]],\n    created: [null, [Validators.required]],\n    is_done: [false],\n  });\n  newTask: TaskModel;\n  isValid = true;\n  errorMsg = '';\n  paramsId = '';\n\n  constructor(\n    private taskService: TasksService,\n    private customerService: CustomersService,\n    private fb: FormBuilder,\n    private route: ActivatedRoute\n  ) {}\n\n  customers: CustomerModel[] = [];\n\n  ngOnInit(): void {\n    this.route.params.subscribe((res) => (this.paramsId = res['id']));\n    if (this.paramsId) {\n      this.taskService.getById(this.paramsId).subscribe((res) => {\n        this.myForm = this.fb.group({\n          description: [res.description, [Validators.required]],\n          customer: [res.customer, [Validators.required]],\n          created: [this.toValidDate(res.created), [Validators.required]],\n          is_done: [res.is_done],\n        });\n      });\n    }\n\n    this.customers = this.customerService.getAll();\n  }\n\n  onSubmit() {\n    if (this.myForm.invalid) {\n      this.isValid = false;\n      return;\n    }\n    this.myForm.value.created = this.toValidDate(this.myForm.value.created);\n    this.newTask = { ...this.myForm.value };\n    if (this.paramsId) {\n      this.taskService.update(this.paramsId, this.newTask);\n      return;\n    }\n    this.taskService.create(this.newTask);\n  }\n\n  validate() {\n    this.isValid = true;\n  }\n\n  toValidDate(date: string) {\n    return new Date(date).toISOString().split('.')[0];\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
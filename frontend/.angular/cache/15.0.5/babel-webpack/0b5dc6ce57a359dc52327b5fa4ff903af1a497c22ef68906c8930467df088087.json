{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/tasks.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction TaskFormComponent_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 10);\n    i0.ɵɵtext(1, \"please fill all details\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class TaskFormComponent {\n  constructor(taskService, fb, route) {\n    this.taskService = taskService;\n    this.fb = fb;\n    this.route = route;\n    this.myForm = this.fb.group({\n      description: [null, [Validators.required]],\n      customer_id: [null, [Validators.required]],\n      created: [null, [Validators.required]],\n      is_done: [false]\n    });\n    this.isValid = true;\n    this.errorMsg = '';\n    this.now = new Date();\n    this.params = 0;\n  }\n  ngOnInit() {\n    this.route.params.subscribe(res => this.params = +res['id']);\n    if (this.params) {\n      this.taskService.getById(this.params).subscribe(res => {\n        this.myForm = this.fb.group({\n          description: [res.description, [Validators.required]],\n          customer_id: [res.customer_id, [Validators.required]],\n          created: [this.toValidDate(res.created), [Validators.required]],\n          is_done: [res.is_done]\n        });\n      });\n    }\n  }\n  onSubmit() {\n    console.log(this.myForm.get('created').invalid);\n    return;\n    if (this.myForm.invalid) {\n      this.isValid = false;\n      return;\n    }\n    this.myForm.value.created = this.toValidDate(this.myForm.value.created);\n    this.newTask = {\n      ...this.myForm.value\n    };\n    if (this.params) {\n      this.taskService.update(this.params, this.newTask);\n      return;\n    }\n    this.taskService.create(this.newTask);\n  }\n  validate() {\n    this.isValid = true;\n  }\n  toValidDate(date) {\n    return new Date(date).toISOString().split('.')[0];\n  }\n}\nTaskFormComponent.ɵfac = function TaskFormComponent_Factory(t) {\n  return new (t || TaskFormComponent)(i0.ɵɵdirectiveInject(i1.TasksService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n};\nTaskFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TaskFormComponent,\n  selectors: [[\"app-task-form\"]],\n  decls: 34,\n  vars: 8,\n  consts: [[1, \"form-container\"], [3, \"formGroup\", \"ngSubmit\"], [\"class\", \"error-msg\", 4, \"ngIf\"], [\"type\", \"text\", \"formControlName\", \"description\", 3, \"keypress\"], [\"formControlName\", \"customer_id\", 3, \"change\"], [\"disabled\", \"\", 3, \"ngValue\"], [3, \"ngValue\"], [\"type\", \"datetime-local\", \"formControlName\", \"created\", 3, \"change\"], [\"type\", \"checkbox\", \"formControlName\", \"is_done\"], [1, \"submit-btn\"], [1, \"error-msg\"]],\n  template: function TaskFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function TaskFormComponent_Template_form_ngSubmit_1_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(2, \"h1\");\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(4, TaskFormComponent_span_4_Template, 2, 0, \"span\", 2);\n      i0.ɵɵelementStart(5, \"div\")(6, \"label\");\n      i0.ɵɵtext(7, \"Description:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"input\", 3);\n      i0.ɵɵlistener(\"keypress\", function TaskFormComponent_Template_input_keypress_8_listener() {\n        return ctx.validate();\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"div\")(10, \"label\");\n      i0.ɵɵtext(11, \"Customer name:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"select\", 4);\n      i0.ɵɵlistener(\"change\", function TaskFormComponent_Template_select_change_12_listener() {\n        return ctx.validate();\n      });\n      i0.ɵɵelementStart(13, \"option\", 5);\n      i0.ɵɵtext(14, \"choose customer\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"option\", 6);\n      i0.ɵɵtext(16, \"tom\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"option\", 6);\n      i0.ɵɵtext(18, \"amit\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"option\", 6);\n      i0.ɵɵtext(20, \"cfir\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(21, \"div\")(22, \"label\");\n      i0.ɵɵtext(23, \"Created:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"input\", 7);\n      i0.ɵɵlistener(\"change\", function TaskFormComponent_Template_input_change_24_listener() {\n        return ctx.validate();\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(25, \"div\")(26, \"label\");\n      i0.ɵɵtext(27, \"Status:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(28, \"div\");\n      i0.ɵɵelement(29, \"input\", 8);\n      i0.ɵɵtext(30, \" done\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(31, \"div\", 9)(32, \"button\");\n      i0.ɵɵtext(33);\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.myForm);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.params ? \"Edit Task\" : \"Add New Task\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isValid);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngValue\", null);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngValue\", 1);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngValue\", 2);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngValue\", 3);\n      i0.ɵɵadvance(14);\n      i0.ɵɵtextInterpolate(ctx.params ? \"Save\" : \"Add\");\n    }\n  },\n  dependencies: [i4.NgIf, i2.ɵNgNoValidate, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.CheckboxControlValueAccessor, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\".form-container[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n  flex-direction: column;\\r\\n  align-items: center;\\r\\n  margin-top: 2rem;\\r\\n}\\r\\n\\r\\nh1[_ngcontent-%COMP%] {\\r\\n  margin-top: 0;\\r\\n  margin-bottom: 1rem;\\r\\n}\\r\\n\\r\\nform[_ngcontent-%COMP%] {\\r\\n  border: 1px black solid;\\r\\n  padding: 1rem;\\r\\n  border-radius: 10px;\\r\\n}\\r\\n\\r\\nform[_ngcontent-%COMP%]   div[_ngcontent-%COMP%] {\\r\\n  width: 24rem;\\r\\n  display: flex;\\r\\n  justify-content: space-between;\\r\\n  font-size: 1.2rem;\\r\\n  margin-bottom:1rem;\\r\\n  margin-top: 0.5rem;\\r\\n}\\r\\n\\r\\ninput[type=text][_ngcontent-%COMP%], input[type=datetime-local][_ngcontent-%COMP%] {\\r\\n  border-radius: 5px;\\r\\n  font-size: 1rem;\\r\\n  padding: 0.2rem 0.5rem;\\r\\n  width: 12.5rem;\\r\\n  border: none;\\r\\n  outline: 3px rgb(106, 104, 104) solid;\\r\\n}\\r\\nform[_ngcontent-%COMP%]   select[_ngcontent-%COMP%] {\\r\\n  border-radius: 5px;\\r\\n  width: 13.5rem;\\r\\n  padding: 0.2rem 0.5rem;\\r\\n  font-size: 1rem;\\r\\n  padding: 0.2rem 1rem;\\r\\n  border: none;\\r\\n  outline: 3px rgb(106, 104, 104) solid;\\r\\n}\\r\\nform[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]{\\r\\n  width: 1rem;\\r\\n  margin-right: 1rem;\\r\\n  margin-left: -2rem;\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\nform[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:last-child {\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n}\\r\\nbutton[_ngcontent-%COMP%]{\\r\\n  background-color: rgb(6, 90, 6);\\r\\n  border: 1px white solid;\\r\\n  font-size: 1rem;\\r\\n  margin-top: 0.5rem;\\r\\n  font-weight: bold;\\r\\n  color: white;\\r\\n  border-radius: 5px;\\r\\n  padding: 0.3rem 1rem;\\r\\n  cursor: pointer;\\r\\n}\\r\\nbutton[_ngcontent-%COMP%]:hover{\\r\\n  background-color: rgb(13, 123, 13);\\r\\n  padding: 0.3rem 1.1rem;\\r\\n}\\r\\n\\r\\n.error-msg[_ngcontent-%COMP%]{\\r\\n  color: red;\\r\\n  font-size: 1.1rem;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy90YXNrLWZvcm0vdGFzay1mb3JtLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLHNCQUFzQjtFQUN0QixtQkFBbUI7RUFDbkIsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLHVCQUF1QjtFQUN2QixhQUFhO0VBQ2IsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsWUFBWTtFQUNaLGFBQWE7RUFDYiw4QkFBOEI7RUFDOUIsaUJBQWlCO0VBQ2pCLGtCQUFrQjtFQUNsQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsZUFBZTtFQUNmLHNCQUFzQjtFQUN0QixjQUFjO0VBQ2QsWUFBWTtFQUNaLHFDQUFxQztBQUN2QztBQUNBO0VBQ0Usa0JBQWtCO0VBQ2xCLGNBQWM7RUFDZCxzQkFBc0I7RUFDdEIsZUFBZTtFQUNmLG9CQUFvQjtFQUNwQixZQUFZO0VBQ1oscUNBQXFDO0FBQ3ZDO0FBQ0E7RUFDRSxXQUFXO0VBQ1gsa0JBQWtCO0VBQ2xCLGtCQUFrQjtFQUNsQixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLHVCQUF1QjtBQUN6QjtBQUNBO0VBQ0UsK0JBQStCO0VBQy9CLHVCQUF1QjtFQUN2QixlQUFlO0VBQ2Ysa0JBQWtCO0VBQ2xCLGlCQUFpQjtFQUNqQixZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLG9CQUFvQjtFQUNwQixlQUFlO0FBQ2pCO0FBQ0E7RUFDRSxrQ0FBa0M7RUFDbEMsc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsVUFBVTtFQUNWLGlCQUFpQjtBQUNuQiIsInNvdXJjZXNDb250ZW50IjpbIi5mb3JtLWNvbnRhaW5lciB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgbWFyZ2luLXRvcDogMnJlbTtcclxufVxyXG5cclxuaDEge1xyXG4gIG1hcmdpbi10b3A6IDA7XHJcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTtcclxufVxyXG5cclxuZm9ybSB7XHJcbiAgYm9yZGVyOiAxcHggYmxhY2sgc29saWQ7XHJcbiAgcGFkZGluZzogMXJlbTtcclxuICBib3JkZXItcmFkaXVzOiAxMHB4O1xyXG59XHJcblxyXG5mb3JtIGRpdiB7XHJcbiAgd2lkdGg6IDI0cmVtO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gIGZvbnQtc2l6ZTogMS4ycmVtO1xyXG4gIG1hcmdpbi1ib3R0b206MXJlbTtcclxuICBtYXJnaW4tdG9wOiAwLjVyZW07XHJcbn1cclxuXHJcbmlucHV0W3R5cGU9dGV4dF0sIGlucHV0W3R5cGU9ZGF0ZXRpbWUtbG9jYWxdIHtcclxuICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgZm9udC1zaXplOiAxcmVtO1xyXG4gIHBhZGRpbmc6IDAuMnJlbSAwLjVyZW07XHJcbiAgd2lkdGg6IDEyLjVyZW07XHJcbiAgYm9yZGVyOiBub25lO1xyXG4gIG91dGxpbmU6IDNweCByZ2IoMTA2LCAxMDQsIDEwNCkgc29saWQ7XHJcbn1cclxuZm9ybSBzZWxlY3Qge1xyXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICB3aWR0aDogMTMuNXJlbTtcclxuICBwYWRkaW5nOiAwLjJyZW0gMC41cmVtO1xyXG4gIGZvbnQtc2l6ZTogMXJlbTtcclxuICBwYWRkaW5nOiAwLjJyZW0gMXJlbTtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgb3V0bGluZTogM3B4IHJnYigxMDYsIDEwNCwgMTA0KSBzb2xpZDtcclxufVxyXG5mb3JtIGlucHV0W3R5cGU9Y2hlY2tib3hde1xyXG4gIHdpZHRoOiAxcmVtO1xyXG4gIG1hcmdpbi1yaWdodDogMXJlbTtcclxuICBtYXJnaW4tbGVmdDogLTJyZW07XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG59XHJcblxyXG5mb3JtIGRpdjpsYXN0LWNoaWxkIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG59XHJcbmJ1dHRvbntcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoNiwgOTAsIDYpO1xyXG4gIGJvcmRlcjogMXB4IHdoaXRlIHNvbGlkO1xyXG4gIGZvbnQtc2l6ZTogMXJlbTtcclxuICBtYXJnaW4tdG9wOiAwLjVyZW07XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgY29sb3I6IHdoaXRlO1xyXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICBwYWRkaW5nOiAwLjNyZW0gMXJlbTtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbn1cclxuYnV0dG9uOmhvdmVye1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigxMywgMTIzLCAxMyk7XHJcbiAgcGFkZGluZzogMC4zcmVtIDEuMXJlbTtcclxufVxyXG5cclxuLmVycm9yLW1zZ3tcclxuICBjb2xvcjogcmVkO1xyXG4gIGZvbnQtc2l6ZTogMS4xcmVtO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","TaskFormComponent","constructor","taskService","fb","route","group","description","required","customer_id","created","is_done","Date","ngOnInit","params","subscribe","res","getById","myForm","toValidDate","onSubmit","console","log","get","invalid","isValid","value","newTask","update","create","validate","date","toISOString","split","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\user\\OneDrive\\Desktop\\John Brice\\angular\\test\\frontend\\src\\app\\components\\task-form\\task-form.component.ts","C:\\Users\\user\\OneDrive\\Desktop\\John Brice\\angular\\test\\frontend\\src\\app\\components\\task-form\\task-form.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport TaskModel from 'src/app/models/task-model';\nimport { TasksService } from 'src/app/services/tasks.service';\n\n@Component({\n  selector: 'app-task-form',\n  templateUrl: './task-form.component.html',\n  styleUrls: ['./task-form.component.css'],\n})\nexport class TaskFormComponent implements OnInit {\n  myForm: FormGroup = this.fb.group({\n    description: [null, [Validators.required]],\n    customer_id: [null, [Validators.required]],\n    created: [null, [Validators.required]],\n    is_done: [false],\n  });\n  newTask: TaskModel;\n  isValid = true;\n  errorMsg = '';\n  now = new Date()\n  params = 0;\n\n  constructor(\n    private taskService: TasksService,\n    private fb: FormBuilder,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.subscribe((res) => (this.params = +res['id']));\n    if (this.params) {\n      this.taskService.getById(this.params).subscribe((res) => {\n        this.myForm = this.fb.group({\n          description: [res.description, [Validators.required]],\n          customer_id: [res.customer_id, [Validators.required]],\n          created: [this.toValidDate(res.created), [Validators.required]],\n          is_done: [res.is_done],\n        });\n      });\n    }\n  }\n\n  onSubmit() {\n    console.log(this.myForm.get('created').invalid)\n    return;\n    if (this.myForm.invalid) {\n      this.isValid = false;\n      return;\n    }\n    this.myForm.value.created = this.toValidDate(this.myForm.value.created);\n    this.newTask = { ...this.myForm.value };\n    if (this.params) {\n      this.taskService.update(this.params, this.newTask);\n      return;\n    }\n    this.taskService.create(this.newTask);\n  }\n\n  validate() {\n    this.isValid = true;\n  }\n\n  toValidDate(date: string) {\n    return new Date(date).toISOString().split('.')[0];\n  }\n}\n","<div class=\"form-container\">\n  <form [formGroup]=\"myForm\" (ngSubmit)=\"onSubmit()\">\n    <h1>{{ params ? \"Edit Task\" : \"Add New Task\" }}</h1>\n    <span class=\"error-msg\" *ngIf=\"!isValid\">please fill all details</span>\n    <div>\n      <label>Description:</label>\n      <input\n        type=\"text\"\n        formControlName=\"description\"\n        (keypress)=\"validate()\"\n      />\n    </div>\n    <div>\n      <label>Customer name:</label>\n      <select formControlName=\"customer_id\" (change)=\"validate()\">\n        <option [ngValue]=\"null\" disabled>choose customer</option>\n        <option [ngValue]=\"1\">tom</option>\n        <option [ngValue]=\"2\">amit</option>\n        <option [ngValue]=\"3\">cfir</option>\n      </select>\n    </div>\n    <div>\n      <label>Created:</label>\n      <input\n        type=\"datetime-local\"\n        formControlName=\"created\"\n        (change)=\"validate()\"\n      />\n    </div>\n    <div>\n      <label>Status:</label>\n      <div><input type=\"checkbox\" formControlName=\"is_done\" /> done</div>\n    </div>\n    <div class=\"submit-btn\">\n      <button>{{ params ? \"Save\" : \"Add\" }}</button>\n    </div>\n  </form>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
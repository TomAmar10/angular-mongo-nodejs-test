{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nexport class TasksService {\n  constructor(http, router, location) {\n    this.http = http;\n    this.router = router;\n    this.location = location;\n    this.URL = 'http://localhost:3700/api/tasks';\n    this.tasksSubject = new BehaviorSubject([]);\n    this.isHomeSubject = new BehaviorSubject(true);\n    this.getAll();\n    this.setPath();\n  }\n  setPath() {\n    this.isHomeSubject.next(this.location.path() === '');\n  }\n  changePath() {\n    this.isHomeSubject.next(!this.isHomeSubject.value);\n  }\n  get isHome$() {\n    return this.isHomeSubject.asObservable();\n  }\n  get tasks$() {\n    return this.tasksSubject.asObservable();\n  }\n  getAll() {\n    this.http.get(`${this.URL}/all`).subscribe(res => {\n      this.tasksSubject.next(res);\n    });\n  }\n  getById(id) {\n    return this.http.get(`${this.URL}/single/${id}`);\n  }\n  create(task) {\n    this.http.post(`${this.URL}/all`, task).subscribe(() => {\n      this.router.navigate(['/']);\n      this.isHomeSubject.next(true);\n    });\n  }\n  update(id, task) {\n    console.log(id);\n    console.log(task);\n    this.http.put(`${this.URL}/${id}`, task).subscribe(() => {\n      this.router.navigate(['/']);\n      this.isHomeSubject.next(true);\n    });\n  }\n  delete(id) {\n    this.http.delete(`${this.URL}/${id}`).subscribe(() => {\n      const newList = this.tasksSubject.value.filter(t => t.id !== id);\n      this.tasksSubject.next(newList);\n    });\n  }\n}\nTasksService.ɵfac = function TasksService_Factory(t) {\n  return new (t || TasksService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.Location));\n};\nTasksService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TasksService,\n  factory: TasksService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;;;;;AAQlD,OAAM,MAAOC,YAAY;EAMvBC,YACUC,IAAgB,EAChBC,MAAc,EACdC,QAAkB;IAFlB,SAAI,GAAJF,IAAI;IACJ,WAAM,GAANC,MAAM;IACN,aAAQ,GAARC,QAAQ;IARlB,QAAG,GAAG,iCAAiC;IAE/B,iBAAY,GAAG,IAAIL,eAAe,CAAc,EAAE,CAAC;IACnD,kBAAa,GAAG,IAAIA,eAAe,CAAU,IAAI,CAAC;IAOxD,IAAI,CAACM,MAAM,EAAE;IACb,IAAI,CAACC,OAAO,EAAE;EAChB;EAEAA,OAAO;IACL,IAAI,CAACC,aAAa,CAACC,IAAI,CAAC,IAAI,CAACJ,QAAQ,CAACK,IAAI,EAAE,KAAK,EAAE,CAAC;EACtD;EAEAC,UAAU;IACR,IAAI,CAACH,aAAa,CAACC,IAAI,CAAC,CAAC,IAAI,CAACD,aAAa,CAACI,KAAK,CAAC;EACpD;EAEA,IAAIC,OAAO;IACT,OAAO,IAAI,CAACL,aAAa,CAACM,YAAY,EAAE;EAC1C;EAEA,IAAIC,MAAM;IACR,OAAO,IAAI,CAACC,YAAY,CAACF,YAAY,EAAE;EACzC;EAEAR,MAAM;IACJ,IAAI,CAACH,IAAI,CAACc,GAAG,CAAc,GAAG,IAAI,CAACC,GAAG,MAAM,CAAC,CAACC,SAAS,CAAEC,GAAG,IAAI;MAC9D,IAAI,CAACJ,YAAY,CAACP,IAAI,CAACW,GAAG,CAAC;IAC7B,CAAC,CAAC;EACJ;EAEAC,OAAO,CAACC,EAAU;IAChB,OAAO,IAAI,CAACnB,IAAI,CAACc,GAAG,CAAY,GAAG,IAAI,CAACC,GAAG,WAAWI,EAAE,EAAE,CAAC;EAC7D;EAEAC,MAAM,CAACC,IAAe;IACpB,IAAI,CAACrB,IAAI,CAACsB,IAAI,CAAY,GAAG,IAAI,CAACP,GAAG,MAAM,EAAEM,IAAI,CAAC,CAACL,SAAS,CAAC,MAAK;MAChE,IAAI,CAACf,MAAM,CAACsB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;MAC3B,IAAI,CAAClB,aAAa,CAACC,IAAI,CAAC,IAAI,CAAC;IAC/B,CAAC,CAAC;EACJ;EAEAkB,MAAM,CAACL,EAAU,EAAEE,IAAe;IAChCI,OAAO,CAACC,GAAG,CAACP,EAAE,CAAC;IACfM,OAAO,CAACC,GAAG,CAACL,IAAI,CAAC;IACjB,IAAI,CAACrB,IAAI,CAAC2B,GAAG,CAAO,GAAG,IAAI,CAACZ,GAAG,IAAII,EAAE,EAAE,EAAEE,IAAI,CAAC,CAACL,SAAS,CAAC,MAAK;MAC5D,IAAI,CAACf,MAAM,CAACsB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;MAC3B,IAAI,CAAClB,aAAa,CAACC,IAAI,CAAC,IAAI,CAAC;IAC/B,CAAC,CAAC;EACJ;EAEAsB,MAAM,CAACT,EAAU;IACf,IAAI,CAACnB,IAAI,CAAC4B,MAAM,CAAO,GAAG,IAAI,CAACb,GAAG,IAAII,EAAE,EAAE,CAAC,CAACH,SAAS,CAAC,MAAK;MACzD,MAAMa,OAAO,GAAG,IAAI,CAAChB,YAAY,CAACJ,KAAK,CAACqB,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACZ,EAAE,KAAKA,EAAE,CAAC;MAClE,IAAI,CAACN,YAAY,CAACP,IAAI,CAACuB,OAAO,CAAC;IACjC,CAAC,CAAC;EACJ;;AA9DW/B,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAkC,SAAZlC,YAAY;EAAAmC,YAFX;AAAM","names":["BehaviorSubject","TasksService","constructor","http","router","location","getAll","setPath","isHomeSubject","next","path","changePath","value","isHome$","asObservable","tasks$","tasksSubject","get","URL","subscribe","res","getById","id","create","task","post","navigate","update","console","log","put","delete","newList","filter","t","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\user\\OneDrive\\Desktop\\John Brice\\angular\\test\\frontend\\src\\app\\services\\tasks.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport TaskModel from '../models/task-model';\nimport { Router } from '@angular/router';\nimport { Location } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TasksService {\n  URL = 'http://localhost:3700/api/tasks';\n\n  private tasksSubject = new BehaviorSubject<TaskModel[]>([]);\n  private isHomeSubject = new BehaviorSubject<boolean>(true);\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private location: Location\n  ) {\n    this.getAll();\n    this.setPath();\n  }\n\n  setPath() {\n    this.isHomeSubject.next(this.location.path() === '');\n  }\n\n  changePath() {\n    this.isHomeSubject.next(!this.isHomeSubject.value);\n  }\n\n  get isHome$() {\n    return this.isHomeSubject.asObservable();\n  }\n\n  get tasks$() {\n    return this.tasksSubject.asObservable();\n  }\n\n  getAll() {\n    this.http.get<TaskModel[]>(`${this.URL}/all`).subscribe((res) => {\n      this.tasksSubject.next(res);\n    });\n  }\n\n  getById(id: number): Observable<TaskModel> {\n    return this.http.get<TaskModel>(`${this.URL}/single/${id}`);\n  }\n\n  create(task: TaskModel) {\n    this.http.post<TaskModel>(`${this.URL}/all`, task).subscribe(() => {\n      this.router.navigate(['/']);\n      this.isHomeSubject.next(true);\n    });\n  }\n\n  update(id: number, task: TaskModel) {\n    console.log(id);\n    console.log(task);\n    this.http.put<void>(`${this.URL}/${id}`, task).subscribe(() => {\n      this.router.navigate(['/']);\n      this.isHomeSubject.next(true);\n    });\n  }\n\n  delete(id: number) {\n    this.http.delete<void>(`${this.URL}/${id}`).subscribe(() => {\n      const newList = this.tasksSubject.value.filter((t) => t.id !== id);\n      this.tasksSubject.next(newList);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet TaskFormComponent = class TaskFormComponent {\n  constructor(taskService, fb, route) {\n    this.taskService = taskService;\n    this.fb = fb;\n    this.route = route;\n    this.myForm = this.fb.group({\n      description: [null, [Validators.required]],\n      customer_id: [null, [Validators.required]],\n      created: [null, [Validators.required]],\n      is_done: [false]\n    });\n    this.isValid = true;\n    this.params = 0;\n  }\n  ngOnInit() {\n    this.route.params.subscribe(res => this.params = +res['id']);\n    if (this.params) {\n      this.taskService.getById(this.params).subscribe(res => {\n        this.myForm = this.fb.group({\n          description: [res.description, [Validators.required]],\n          customer_id: [res.customer_id, [Validators.required]],\n          created: [this.toValidDate(res.created), [Validators.required]],\n          is_done: [res.is_done]\n        });\n      });\n    }\n  }\n  onSubmit() {\n    Object.keys(this.myForm.value).map(o => {\n      if (!this.myForm.value[o] && o !== 'is_done') {\n        this.isValid = false;\n        return;\n      }\n    });\n    if (!this.isValid) return;\n    this.myForm.value.created = this.toValidDate(this.myForm.value.created);\n    this.newTask = {\n      ...this.myForm.value\n    };\n    if (this.params) {\n      this.taskService.update(this.params, this.newTask);\n      return;\n    }\n    this.taskService.create(this.newTask);\n  }\n  validate() {\n    this.isValid = true;\n  }\n  toValidDate(date) {\n    return new Date(date).toISOString().split('.')[0];\n  }\n};\nTaskFormComponent = __decorate([Component({\n  selector: 'app-task-form',\n  templateUrl: './task-form.component.html',\n  styleUrls: ['./task-form.component.css']\n})], TaskFormComponent);\nexport { TaskFormComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAiCC,UAAU,QAAQ,gBAAgB;AAU5D,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAW5BC,YACUC,WAAyB,EACzBC,EAAe,EACfC,KAAqB;IAFrB,gBAAW,GAAXF,WAAW;IACX,OAAE,GAAFC,EAAE;IACF,UAAK,GAALC,KAAK;IAbf,WAAM,GAAc,IAAI,CAACD,EAAE,CAACE,KAAK,CAAC;MAChCC,WAAW,EAAE,CAAC,IAAI,EAAE,CAACP,UAAU,CAACQ,QAAQ,CAAC,CAAC;MAC1CC,WAAW,EAAE,CAAC,IAAI,EAAE,CAACT,UAAU,CAACQ,QAAQ,CAAC,CAAC;MAC1CE,OAAO,EAAE,CAAC,IAAI,EAAE,CAACV,UAAU,CAACQ,QAAQ,CAAC,CAAC;MACtCG,OAAO,EAAE,CAAC,KAAK;KAChB,CAAC;IAEF,YAAO,GAAG,IAAI;IACd,WAAM,GAAG,CAAC;EAMP;EAEHC,QAAQ;IACN,IAAI,CAACP,KAAK,CAACQ,MAAM,CAACC,SAAS,CAAEC,GAAG,IAAM,IAAI,CAACF,MAAM,GAAG,CAACE,GAAG,CAAC,IAAI,CAAE,CAAC;IAChE,IAAI,IAAI,CAACF,MAAM,EAAE;MACf,IAAI,CAACV,WAAW,CAACa,OAAO,CAAC,IAAI,CAACH,MAAM,CAAC,CAACC,SAAS,CAAEC,GAAG,IAAI;QACtD,IAAI,CAACE,MAAM,GAAG,IAAI,CAACb,EAAE,CAACE,KAAK,CAAC;UAC1BC,WAAW,EAAE,CAACQ,GAAG,CAACR,WAAW,EAAE,CAACP,UAAU,CAACQ,QAAQ,CAAC,CAAC;UACrDC,WAAW,EAAE,CAACM,GAAG,CAACN,WAAW,EAAE,CAACT,UAAU,CAACQ,QAAQ,CAAC,CAAC;UACrDE,OAAO,EAAE,CAAC,IAAI,CAACQ,WAAW,CAACH,GAAG,CAACL,OAAO,CAAC,EAAE,CAACV,UAAU,CAACQ,QAAQ,CAAC,CAAC;UAC/DG,OAAO,EAAE,CAACI,GAAG,CAACJ,OAAO;SACtB,CAAC;MACJ,CAAC,CAAC;;EAEN;EAEAQ,QAAQ;IACNC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACJ,MAAM,CAACK,KAAK,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAI;MACvC,IAAI,CAAC,IAAI,CAACP,MAAM,CAACK,KAAK,CAACE,CAAC,CAAC,IAAIA,CAAC,KAAK,SAAS,EAAE;QAC5C,IAAI,CAACC,OAAO,GAAG,KAAK;QACpB;;IAEJ,CAAC,CAAC;IACF,IAAI,CAAC,IAAI,CAACA,OAAO,EAAE;IACnB,IAAI,CAACR,MAAM,CAACK,KAAK,CAACZ,OAAO,GAAG,IAAI,CAACQ,WAAW,CAAC,IAAI,CAACD,MAAM,CAACK,KAAK,CAACZ,OAAO,CAAC;IACvE,IAAI,CAACgB,OAAO,GAAG;MAAE,GAAG,IAAI,CAACT,MAAM,CAACK;IAAK,CAAE;IACvC,IAAI,IAAI,CAACT,MAAM,EAAE;MACf,IAAI,CAACV,WAAW,CAACwB,MAAM,CAAC,IAAI,CAACd,MAAM,EAAE,IAAI,CAACa,OAAO,CAAC;MAClD;;IAEF,IAAI,CAACvB,WAAW,CAACyB,MAAM,CAAC,IAAI,CAACF,OAAO,CAAC;EACvC;EAEAG,QAAQ;IACN,IAAI,CAACJ,OAAO,GAAG,IAAI;EACrB;EAEAP,WAAW,CAACY,IAAY;IACtB,OAAO,IAAIC,IAAI,CAACD,IAAI,CAAC,CAACE,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACnD;CACD;AAvDYhC,iBAAiB,eAL7BF,SAAS,CAAC;EACTmC,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,GACWnC,iBAAiB,CAuD7B;SAvDYA,iBAAiB","names":["Component","Validators","TaskFormComponent","constructor","taskService","fb","route","group","description","required","customer_id","created","is_done","ngOnInit","params","subscribe","res","getById","myForm","toValidDate","onSubmit","Object","keys","value","map","o","isValid","newTask","update","create","validate","date","Date","toISOString","split","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\user\\OneDrive\\Desktop\\John Brice\\angular\\test\\frontend\\src\\app\\components\\task-form\\task-form.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport TaskModel from 'src/app/models/task-model';\nimport { TasksService } from 'src/app/services/tasks.service';\n\n@Component({\n  selector: 'app-task-form',\n  templateUrl: './task-form.component.html',\n  styleUrls: ['./task-form.component.css'],\n})\nexport class TaskFormComponent implements OnInit {\n  myForm: FormGroup = this.fb.group({\n    description: [null, [Validators.required]],\n    customer_id: [null, [Validators.required]],\n    created: [null, [Validators.required]],\n    is_done: [false],\n  });\n  newTask: TaskModel;\n  isValid = true;\n  params = 0;\n\n  constructor(\n    private taskService: TasksService,\n    private fb: FormBuilder,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.subscribe((res) => (this.params = +res['id']));\n    if (this.params) {\n      this.taskService.getById(this.params).subscribe((res) => {\n        this.myForm = this.fb.group({\n          description: [res.description, [Validators.required]],\n          customer_id: [res.customer_id, [Validators.required]],\n          created: [this.toValidDate(res.created), [Validators.required]],\n          is_done: [res.is_done],\n        });\n      });\n    }\n  }\n\n  onSubmit() {\n    Object.keys(this.myForm.value).map((o) => {\n      if (!this.myForm.value[o] && o !== 'is_done') {\n        this.isValid = false;\n        return;\n      }\n    });\n    if (!this.isValid) return;\n    this.myForm.value.created = this.toValidDate(this.myForm.value.created);\n    this.newTask = { ...this.myForm.value };\n    if (this.params) {\n      this.taskService.update(this.params, this.newTask);\n      return;\n    }\n    this.taskService.create(this.newTask);\n  }\n\n  validate() {\n    this.isValid = true;\n  }\n\n  toValidDate(date: string) {\n    return new Date(date).toISOString().split('.')[0];\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
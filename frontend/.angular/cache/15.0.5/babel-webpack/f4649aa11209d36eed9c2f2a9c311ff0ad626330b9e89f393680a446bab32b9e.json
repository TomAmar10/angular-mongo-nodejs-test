{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nexport class OperationsService {\n  constructor(http, router, location) {\n    this.http = http;\n    this.router = router;\n    this.location = location;\n    this.URL = \"http://localhost:3200/api/operations\";\n    this.operationsSubject = new BehaviorSubject([]);\n    this.isHomeSubject = new BehaviorSubject(true);\n    this.getAll();\n  }\n  get operations$() {\n    return this.operationsSubject.asObservable();\n  }\n  getAll() {\n    this.http.get(`${this.URL}/all`).subscribe(res => {\n      this.operationsSubject.next(res);\n    });\n  }\n  getByAccount(id) {\n    this.http.get(`${this.URL}/all/account/${id}`).subscribe(res => {\n      this.operationsSubject.next(res);\n    });\n  }\n  getById(id) {\n    return this.http.get(`${this.URL}/single/${id}`);\n  }\n  create(operation) {\n    this.http.post(`${this.URL}/all/add`, operation).subscribe(() => {\n      this.router.navigate([\"/\"]);\n    });\n  }\n  update(id, operation) {\n    this.http.patch(`${this.URL}/all/update/${id}`, operation).subscribe(res => {\n      this.router.navigate([\"/\"]);\n    });\n  }\n  delete(id) {\n    this.http.delete(`${this.URL}/all/delete/${id}`).subscribe(() => {\n      const newList = this.operationsSubject.value.filter(t => t._id !== id);\n      this.operationsSubject.next(newList);\n    });\n  }\n}\nOperationsService.ɵfac = function OperationsService_Factory(t) {\n  return new (t || OperationsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.Location));\n};\nOperationsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OperationsService,\n  factory: OperationsService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;;;;;AAQlD,OAAM,MAAOC,iBAAiB;EAM5BC,YACUC,IAAgB,EAChBC,MAAc,EACdC,QAAkB;IAFlB,SAAI,GAAJF,IAAI;IACJ,WAAM,GAANC,MAAM;IACN,aAAQ,GAARC,QAAQ;IARlB,QAAG,GAAG,sCAAsC;IAEpC,sBAAiB,GAAG,IAAIL,eAAe,CAAmB,EAAE,CAAC;IAC7D,kBAAa,GAAG,IAAIA,eAAe,CAAU,IAAI,CAAC;IAOxD,IAAI,CAACM,MAAM,EAAE;EACf;EAEA,IAAIC,WAAW;IACb,OAAO,IAAI,CAACC,iBAAiB,CAACC,YAAY,EAAE;EAC9C;EAEAH,MAAM;IACJ,IAAI,CAACH,IAAI,CAACO,GAAG,CAAmB,GAAG,IAAI,CAACC,GAAG,MAAM,CAAC,CAACC,SAAS,CAAEC,GAAG,IAAI;MACnE,IAAI,CAACL,iBAAiB,CAACM,IAAI,CAACD,GAAG,CAAC;IAClC,CAAC,CAAC;EACJ;EAEAE,YAAY,CAACC,EAAU;IACrB,IAAI,CAACb,IAAI,CACNO,GAAG,CAAmB,GAAG,IAAI,CAACC,GAAG,gBAAgBK,EAAE,EAAE,CAAC,CACtDJ,SAAS,CAAEC,GAAG,IAAI;MACjB,IAAI,CAACL,iBAAiB,CAACM,IAAI,CAACD,GAAG,CAAC;IAClC,CAAC,CAAC;EACN;EAEAI,OAAO,CAACD,EAAU;IAChB,OAAO,IAAI,CAACb,IAAI,CAACO,GAAG,CAAiB,GAAG,IAAI,CAACC,GAAG,WAAWK,EAAE,EAAE,CAAC;EAClE;EAEAE,MAAM,CAACC,SAAyB;IAC9B,IAAI,CAAChB,IAAI,CACNiB,IAAI,CAAiB,GAAG,IAAI,CAACT,GAAG,UAAU,EAAEQ,SAAS,CAAC,CACtDP,SAAS,CAAC,MAAK;MACd,IAAI,CAACR,MAAM,CAACiB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC,CAAC;EACN;EAEAC,MAAM,CAACN,EAAU,EAAEG,SAAyB;IAC1C,IAAI,CAAChB,IAAI,CACNoB,KAAK,CAAM,GAAG,IAAI,CAACZ,GAAG,eAAeK,EAAE,EAAE,EAAEG,SAAS,CAAC,CACrDP,SAAS,CAAEC,GAAG,IAAI;MACjB,IAAI,CAACT,MAAM,CAACiB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC,CAAC;EACN;EAEAG,MAAM,CAACR,EAAU;IACf,IAAI,CAACb,IAAI,CAACqB,MAAM,CAAO,GAAG,IAAI,CAACb,GAAG,eAAeK,EAAE,EAAE,CAAC,CAACJ,SAAS,CAAC,MAAK;MACpE,MAAMa,OAAO,GAAG,IAAI,CAACjB,iBAAiB,CAACkB,KAAK,CAACC,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,GAAG,KAAKb,EAAE,CAAC;MACxE,IAAI,CAACR,iBAAiB,CAACM,IAAI,CAACW,OAAO,CAAC;IACtC,CAAC,CAAC;EACJ;;AAzDWxB,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAA6B,SAAjB7B,iBAAiB;EAAA8B,YAFhB;AAAM","names":["BehaviorSubject","OperationsService","constructor","http","router","location","getAll","operations$","operationsSubject","asObservable","get","URL","subscribe","res","next","getByAccount","id","getById","create","operation","post","navigate","update","patch","delete","newList","value","filter","t","_id","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\user\\OneDrive\\Desktop\\John Brice\\mongoDB\\TomAmar_test4\\frontend\\src\\app\\services\\operations.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { BehaviorSubject, Observable } from \"rxjs\";\nimport OperationModel from \"../models/operation-model\";\nimport { Router } from \"@angular/router\";\nimport { Location } from \"@angular/common\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class OperationsService {\n  URL = \"http://localhost:3200/api/operations\";\n\n  private operationsSubject = new BehaviorSubject<OperationModel[]>([]);\n  private isHomeSubject = new BehaviorSubject<boolean>(true);\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private location: Location\n  ) {\n    this.getAll();\n  }\n\n  get operations$() {\n    return this.operationsSubject.asObservable();\n  }\n\n  getAll() {\n    this.http.get<OperationModel[]>(`${this.URL}/all`).subscribe((res) => {\n      this.operationsSubject.next(res);\n    });\n  }\n\n  getByAccount(id: string) {\n    this.http\n      .get<OperationModel[]>(`${this.URL}/all/account/${id}`)\n      .subscribe((res) => {\n        this.operationsSubject.next(res);\n      });\n  }\n\n  getById(id: string): Observable<OperationModel> {\n    return this.http.get<OperationModel>(`${this.URL}/single/${id}`);\n  }\n\n  create(operation: OperationModel) {\n    this.http\n      .post<OperationModel>(`${this.URL}/all/add`, operation)\n      .subscribe(() => {\n        this.router.navigate([\"/\"]);\n      });\n  }\n\n  update(id: string, operation: OperationModel) {\n    this.http\n      .patch<any>(`${this.URL}/all/update/${id}`, operation)\n      .subscribe((res) => {\n        this.router.navigate([\"/\"]);\n      });\n  }\n\n  delete(id: string) {\n    this.http.delete<void>(`${this.URL}/all/delete/${id}`).subscribe(() => {\n      const newList = this.operationsSubject.value.filter((t) => t._id !== id);\n      this.operationsSubject.next(newList);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
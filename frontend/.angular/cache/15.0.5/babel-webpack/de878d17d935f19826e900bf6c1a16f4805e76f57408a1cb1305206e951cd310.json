{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nexport class TasksService {\n  constructor(http, router, location) {\n    this.http = http;\n    this.router = router;\n    this.location = location;\n    this.URL = 'http://localhost:3700/api/tasks';\n    this.currPath = '';\n    this.tasksSubject = new BehaviorSubject([]);\n    this.getAll();\n    this.currPath = this.location.path();\n  }\n  get path$() {\n    return this.currPath;\n  }\n  get tasks$() {\n    return this.tasksSubject.asObservable();\n  }\n  getAll() {\n    this.http.get(`${this.URL}/all`).subscribe(res => {\n      this.tasksSubject.next(res);\n    });\n  }\n  getById(id) {\n    return this.http.get(`${this.URL}/single/${id}`);\n  }\n  create(task) {\n    this.http.post(`${this.URL}/all`, task).subscribe(() => {\n      this.router.navigate(['/']);\n    });\n  }\n  update(id, task) {\n    return this.http.put(`${this.URL}/${id}`, task);\n  }\n  delete(id) {\n    this.http.delete(`${this.URL}/${id}`).subscribe(() => {\n      const newList = this.tasksSubject.value.filter(t => t.id !== id);\n      this.tasksSubject.next(newList);\n    });\n  }\n}\nTasksService.ɵfac = function TasksService_Factory(t) {\n  return new (t || TasksService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.Location));\n};\nTasksService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TasksService,\n  factory: TasksService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;;;;;AAQlD,OAAM,MAAOC,YAAY;EAMvBC,YACUC,IAAgB,EAChBC,MAAc,EACdC,QAAkB;IAFlB,SAAI,GAAJF,IAAI;IACJ,WAAM,GAANC,MAAM;IACN,aAAQ,GAARC,QAAQ;IARlB,QAAG,GAAG,iCAAiC;IACvC,aAAQ,GAAG,EAAE;IAEL,iBAAY,GAAG,IAAIL,eAAe,CAAc,EAAE,CAAC;IAOzD,IAAI,CAACM,MAAM,EAAE;IACb,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACF,QAAQ,CAACG,IAAI,EAAE;EACtC;EAEA,IAAIC,KAAK;IACP,OAAO,IAAI,CAACF,QAAQ;EACtB;EAEA,IAAIG,MAAM;IACR,OAAO,IAAI,CAACC,YAAY,CAACC,YAAY,EAAE;EACzC;EAEAN,MAAM;IACJ,IAAI,CAACH,IAAI,CAACU,GAAG,CAAc,GAAG,IAAI,CAACC,GAAG,MAAM,CAAC,CAACC,SAAS,CAAEC,GAAG,IAAI;MAC9D,IAAI,CAACL,YAAY,CAACM,IAAI,CAACD,GAAG,CAAC;IAC7B,CAAC,CAAC;EACJ;EAEAE,OAAO,CAACC,EAAU;IAChB,OAAO,IAAI,CAAChB,IAAI,CAACU,GAAG,CAAY,GAAG,IAAI,CAACC,GAAG,WAAWK,EAAE,EAAE,CAAC;EAC7D;EAEAC,MAAM,CAACC,IAAe;IACpB,IAAI,CAAClB,IAAI,CAACmB,IAAI,CAAY,GAAG,IAAI,CAACR,GAAG,MAAM,EAAEO,IAAI,CAAC,CAACN,SAAS,CAAC,MAAK;MAChE,IAAI,CAACX,MAAM,CAACmB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC,CAAC;EACJ;EAEAC,MAAM,CAACL,EAAU,EAAEE,IAAe;IAChC,OAAO,IAAI,CAAClB,IAAI,CAACsB,GAAG,CAAO,GAAG,IAAI,CAACX,GAAG,IAAIK,EAAE,EAAE,EAAEE,IAAI,CAAC;EACvD;EAEAK,MAAM,CAACP,EAAU;IACf,IAAI,CAAChB,IAAI,CAACuB,MAAM,CAAO,GAAG,IAAI,CAACZ,GAAG,IAAIK,EAAE,EAAE,CAAC,CAACJ,SAAS,CAAC,MAAK;MACzD,MAAMY,OAAO,GAAG,IAAI,CAAChB,YAAY,CAACiB,KAAK,CAACC,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACX,EAAE,KAAKA,EAAE,CAAC;MAClE,IAAI,CAACR,YAAY,CAACM,IAAI,CAACU,OAAO,CAAC;IACjC,CAAC,CAAC;EACJ;;AAhDW1B,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAA8B,SAAZ9B,YAAY;EAAA+B,YAFX;AAAM","names":["BehaviorSubject","TasksService","constructor","http","router","location","getAll","currPath","path","path$","tasks$","tasksSubject","asObservable","get","URL","subscribe","res","next","getById","id","create","task","post","navigate","update","put","delete","newList","value","filter","t","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\user\\OneDrive\\Desktop\\John Brice\\angular\\test\\frontend\\src\\app\\services\\tasks.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport TaskModel from '../models/task-model';\nimport { Router } from '@angular/router';\nimport { Location } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TasksService {\n  URL = 'http://localhost:3700/api/tasks';\n  currPath = '';\n\n  private tasksSubject = new BehaviorSubject<TaskModel[]>([]);\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private location: Location\n  ) {\n    this.getAll();\n    this.currPath = this.location.path();\n  }\n\n  get path$() {\n    return this.currPath;\n  }\n\n  get tasks$() {\n    return this.tasksSubject.asObservable();\n  }\n\n  getAll() {\n    this.http.get<TaskModel[]>(`${this.URL}/all`).subscribe((res) => {\n      this.tasksSubject.next(res);\n    });\n  }\n\n  getById(id: number): Observable<TaskModel> {\n    return this.http.get<TaskModel>(`${this.URL}/single/${id}`);\n  }\n\n  create(task: TaskModel) {\n    this.http.post<TaskModel>(`${this.URL}/all`, task).subscribe(() => {\n      this.router.navigate(['/']);\n    });\n  }\n\n  update(id: number, task: TaskModel): Observable<void> {\n    return this.http.put<void>(`${this.URL}/${id}`, task);\n  }\n\n  delete(id: number) {\n    this.http.delete<void>(`${this.URL}/${id}`).subscribe(() => {\n      const newList = this.tasksSubject.value.filter((t) => t.id !== id);\n      this.tasksSubject.next(newList);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}